name: observability-tools

services:
  grafana:
    image: grafana/grafana-oss:${IMAGE_VERSION_GRAFANA}
    container_name: ${CONTAINER_NAME_GRAFANA}
    restart: unless-stopped
    volumes:
      - ${VOLUME_MOUNT_ROOT}/${CONTAINER_NAME_GRAFANA}/data:/var/lib/grafana
      - ${VOLUME_MOUNT_ROOT}/${CONTAINER_NAME_GRAFANA}/logs/:/var/log/grafana
      - ${VOLUME_MOUNT_ROOT}/${CONTAINER_NAME_GRAFANA}/plugins/:/var/lib/grafana/plugins
      - ${CONFIG_MOUNT_ROOT}/${CONTAINER_NAME_GRAFANA}/provisioning:/etc/grafana/provisioning
      - ${CONFIG_MOUNT_ROOT}/${CONTAINER_NAME_GRAFANA}/dashboards:/var/lib/grafana/dashboards
    user: '0'
    environment:
      - GF_DATABASE_TYPE=${GF_DATABASE_TYPE}
      - GF_DATABASE_HOST=${GF_DATABASE_HOST}
      - GF_DATABASE_NAME=${GF_DATABASE_NAME}
      - GF_DATABASE_USER=${GF_DATABASE_USER}
      - GF_DATABASE_PASSWORD=${GF_DATABASE_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    ports:
      - '${PORT_GRAFANA}:3000'
    networks:
      - observability-tools
    depends_on:
      - grafana-postgres
      - prometheus
      - loki
      - tempo
    labels:
      - "traefik.enable=${TRAEFIK_ENABLE}"
      - "traefik.http.routers.${CONTAINER_NAME_GRAFANA}.rule=Host(`${CONTAINER_NAME_GRAFANA}.${TRAEFIK_DOMAIN_NAME}`)"
      - "traefik.http.routers.${CONTAINER_NAME_GRAFANA}.entrypoints=${TRAEFIK_ENTRYPOINT}"
      - "traefik.http.services.${CONTAINER_NAME_GRAFANA}.loadbalancer.server.port=3000"
      - "traefik.http.routers.${CONTAINER_NAME_GRAFANA}.service=${CONTAINER_NAME_GRAFANA}"
      - "traefik.http.routers.${CONTAINER_NAME_GRAFANA}.tls.certresolver=${TRAEFIK_CERT_RESOLVER}"

  grafana-postgres:
    image: postgres:${IMAGE_VERSION_GRAFANA_POSTGRES}
    container_name: ${CONTAINER_NAME_GRAFANA_POSTGRES}
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${GF_DATABASE_USER}
      - POSTGRES_PASSWORD=${GF_DATABASE_PASSWORD}
      - POSTGRES_DB=${GF_DATABASE_NAME}
    volumes:
      - ${VOLUME_MOUNT_ROOT}/${CONTAINER_NAME_GRAFANA_POSTGRES}/data:/var/lib/postgresql/data
    networks:
      - observability-tools

  node_exporter:
    image: prom/node-exporter:${IMAGE_VERSION_NODE_EXPORTER}
    container_name: ${CONTAINER_NAME_NODE_EXPORTER}
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:${IMAGE_VERSION_CADVISOR}
    container_name: ${CONTAINER_NAME_CADVISOR}
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    ports:
      - ${PORT_CADVISOR}:8080
    devices:
      - /dev/kmsg
    networks:
      - observability-tools
    labels:
      - "traefik.enable=${TRAEFIK_ENABLE}"
      - "traefik.http.routers.${CONTAINER_NAME_CADVISOR}.rule=Host(`${CONTAINER_NAME_CADVISOR}.${TRAEFIK_DOMAIN_NAME}`)"
      - "traefik.http.routers.${CONTAINER_NAME_CADVISOR}.entrypoints=${TRAEFIK_ENTRYPOINT}"
      - "traefik.http.services.${CONTAINER_NAME_CADVISOR}.loadbalancer.server.port=8080"
      - "traefik.http.routers.${CONTAINER_NAME_CADVISOR}.service=${CONTAINER_NAME_CADVISOR}"
      - "traefik.http.routers.${CONTAINER_NAME_CADVISOR}.tls.certresolver=${TRAEFIK_CERT_RESOLVER}"

  prometheus:
    image: prom/prometheus:${IMAGE_VERSION_PROMETHEUS}
    container_name: ${CONTAINER_NAME_PROMETHEUS}
    restart: unless-stopped
    user: '0'
    volumes:
      - ${CONFIG_MOUNT_ROOT}/${CONTAINER_NAME_PROMETHEUS}/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${VOLUME_MOUNT_ROOT}/${CONTAINER_NAME_PROMETHEUS}/data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --enable-feature=exemplar-storage
      - --web.enable-remote-write-receiver
      - --storage.tsdb.retention.time=1y
      - --web.enable-lifecycle # to enable config reload with HTTP POST http://prometheus:9090/-/reload
    ports:
      - ${PORT_PROMETHEUS}:9090
    networks:
      - observability-tools
    # In case you want to scrape node_exporter data from host
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      - "traefik.enable=${TRAEFIK_ENABLE}"
      - "traefik.http.routers.${CONTAINER_NAME_PROMETHEUS}.rule=Host(`${CONTAINER_NAME_PROMETHEUS}.${TRAEFIK_DOMAIN_NAME}`)"
      - "traefik.http.routers.${CONTAINER_NAME_PROMETHEUS}.entrypoints=${TRAEFIK_ENTRYPOINT}"
      - "traefik.http.services.${CONTAINER_NAME_PROMETHEUS}.loadbalancer.server.port=9090"
      - "traefik.http.routers.${CONTAINER_NAME_PROMETHEUS}.service=${CONTAINER_NAME_PROMETHEUS}"
      - "traefik.http.routers.${CONTAINER_NAME_PROMETHEUS}.tls.certresolver=${TRAEFIK_CERT_RESOLVER}"

  alertmanager:
    image: prom/alertmanager:${IMAGE_VERSION_ALERTMANAGER}
    container_name: ${CONTAINER_NAME_ALERTMANAGER}
    restart: unless-stopped
    user: '0'
    volumes:
      - ${CONFIG_MOUNT_ROOT}/${CONTAINER_NAME_ALERTMANAGER}/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ${VOLUME_MOUNT_ROOT}/${CONTAINER_NAME_ALERTMANAGER}/data:/alertmanager
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
      - --storage.path=/alertmanager
    ports:
      - ${PORT_ALERTMANAGER}:9093
    networks:
      - observability-tools
    # In case you want to scrape node_exporter data from host
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=${TRAEFIK_ENABLE}"
      - "traefik.http.routers.${CONTAINER_NAME_ALERTMANAGER}.rule=Host(`${CONTAINER_NAME_ALERTMANAGER}.${TRAEFIK_DOMAIN_NAME}`)"
      - "traefik.http.routers.${CONTAINER_NAME_ALERTMANAGER}.entrypoints=${TRAEFIK_ENTRYPOINT}"
      - "traefik.http.services.${CONTAINER_NAME_ALERTMANAGER}.loadbalancer.server.port=9090"
      - "traefik.http.routers.${CONTAINER_NAME_ALERTMANAGER}.service=${CONTAINER_NAME_ALERTMANAGER}"
      - "traefik.http.routers.${CONTAINER_NAME_ALERTMANAGER}.tls.certresolver=${TRAEFIK_CERT_RESOLVER}"

  loki:
    image: grafana/loki:${IMAGE_VERSION_LOKI}
    container_name: ${CONTAINER_NAME_LOKI}
    restart: unless-stopped
    ports:
      - "${PORT_LOKI}:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - observability-tools

  tempo:
    container_name: ${CONTAINER_NAME_TEMPO}
    image: grafana/tempo:${IMAGE_VERSION_TEMPO}
    command: -config.file=/etc/tempo.yml
    volumes:
      - ${CONFIG_MOUNT_ROOT}/${CONTAINER_NAME_TEMPO}/tempo.yml:/etc/tempo.yml
    restart: unless-stopped
    ports:
      - "${PORT_TEMPO}:3200"
    networks:
      - observability-tools

  otel-collector:
    image: otel/opentelemetry-collector-contrib:${IMAGE_VERSION_OTEL_COLLECTOR}
    container_name: ${CONTAINER_NAME_OTEL_COLLECTOR}
    volumes:
      - ${CONFIG_MOUNT_ROOT}/${CONTAINER_NAME_OTEL_COLLECTOR}/config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      # - 8888:8888 # Prometheus metrics exposed by the collector
      # - 8889:8889 # Prometheus exporter metrics
      - ${PORT_OTEL_GRPC}:4317 # OTLP gRPC receiver
      - ${PORT_OTEL_HTTP}:4318 # OTLP http receiver
    networks:
      - observability-tools
    depends_on:
      - prometheus
      - loki
      - tempo
    labels:
      - "traefik.enable=${TRAEFIK_ENABLE}"
      - "traefik.http.routers.${CONTAINER_NAME_OTEL_COLLECTOR}-grpc.rule=Host(`otel-grpc.${TRAEFIK_DOMAIN_NAME}`)"
      - "traefik.http.routers.${CONTAINER_NAME_OTEL_COLLECTOR}-grpc.entrypoints=${TRAEFIK_ENTRYPOINT}"
      - "traefik.http.services.${CONTAINER_NAME_OTEL_COLLECTOR}-grpc.loadbalancer.server.port=4317"
      - "traefik.http.routers.${CONTAINER_NAME_OTEL_COLLECTOR}-grpc.service=${CONTAINER_NAME_OTEL_COLLECTOR}-grpc"
      - "traefik.http.routers.${CONTAINER_NAME_OTEL_COLLECTOR}-grpc.tls.certresolver=${TRAEFIK_CERT_RESOLVER}"
      - "traefik.http.routers.${CONTAINER_NAME_OTEL_COLLECTOR}-http.rule=Host(`otel-http.${TRAEFIK_DOMAIN_NAME}`)"
      - "traefik.http.routers.${CONTAINER_NAME_OTEL_COLLECTOR}-http.entrypoints=${TRAEFIK_ENTRYPOINT}"
      - "traefik.http.services.${CONTAINER_NAME_OTEL_COLLECTOR}-http.loadbalancer.server.port=4318"
      - "traefik.http.routers.${CONTAINER_NAME_OTEL_COLLECTOR}-http.service=${CONTAINER_NAME_OTEL_COLLECTOR}-http"
      - "traefik.http.routers.${CONTAINER_NAME_OTEL_COLLECTOR}-http.tls.certresolver=${TRAEFIK_CERT_RESOLVER}"

networks:
  observability-tools:
    driver: bridge
    attachable: true
